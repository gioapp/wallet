package gelook

import (
	"gioui.org/layout"
	"gioui.org/unit"
	"gioui.org/widget"
	"gioui.org/widget/material"
	"github.com/gioapp/gel/container"
	"github.com/gioapp/wallet/pkg/gel"
)

var (
	widgetButtonUp   = new(widget.Clickable)
	widgetButtonDown = new(widget.Clickable)
)

type ScrollBar struct {
	ColorBg      string
	BorderRadius [4]float32
	OperateValue interface{}
	slider       *ScrollBarSlider
	up           material.IconButtonStyle
	down         material.IconButtonStyle
	container    container.DuoUIcontainerStyle
}

type ScrollBarSlider struct {
	container container.DuoUIcontainerStyle
	Icon      widget.Icon
}

func (t *DuoUItheme) ScrollBar(leftMargin int) *ScrollBar {
	slider := &ScrollBarSlider{
		container: container.DuoUIcontainer(t, 0, t.Colors["Primary"]),
		Icon:      *t.Icons["Grab"],
	}
	slider.container.CornerRadius = 8
	scrollbar := &ScrollBar{
		ColorBg:      t.Colors["DarkGrayII"],
		BorderRadius: [4]float32{},
		slider:       slider,
		//up:           material.IconButton(t.Icons["Up"]),
		//down:         material.IconButton(t.Icons["Down"]),
		container:    container.DuoUIcontainer(t, 0, t.Colors["Light"]),
	}
	scrollbar.container.PaddingLeft = leftMargin
	return scrollbar
}

func (p *DuoUIpanel) ScrollBarLayout(gtx layout.Context, panel *gel.Panel) {
	p.ScrollBar.container.Layout(gtx, layout.Center, func(gtx layout.Context) layout.Dimensions {

		layout.Flex{
			Axis: layout.Vertical,
		}.Layout(gtx,
			layout.Rigid(func(gtx layout.Context) layout.Dimensions {
				for widgetButtonUp.Clicked() {
					if panel.PanelContentLayout.Position.First > 0 {
						panel.PanelContentLayout.Position.First = panel.PanelContentLayout.Position.First - 1
						panel.PanelContentLayout.Position.Offset = 0
					}
				}
				//p.ScrollBar.up.Padding = unit.Dp(0)
				//p.ScrollBar.up.Size = unit.Dp(16)
				//p.ScrollBar.up.Color = HexARGB("ffcfcfcf")
				//p.ScrollBar.up.Layout(gtx, widgetButtonUp)
				return layout.Dimensions{}
			}),
			layout.Flexed(1, func(gtx layout.Context) layout.Dimensions {
				p.bodyLayout(gtx, panel)
				return layout.Dimensions{}
			}),
			layout.Rigid(func(gtx layout.Context) layout.Dimensions {
				for widgetButtonDown.Clicked() {
					if panel.PanelContentLayout.Position.BeforeEnd {
						panel.PanelContentLayout.Position.First = panel.PanelContentLayout.Position.First + 1
						panel.PanelContentLayout.Position.Offset = 0
					}
				}
				//p.ScrollBar.down.Padding = unit.Dp(0)
				//p.ScrollBar.down.Size = unit.Dp(16)
				//p.ScrollBar.down.Color = HexARGB("ffcfcfcf")
				//p.ScrollBar.down.Layout(gtx, widgetButtonDown)
				return layout.Dimensions{}
			}),
		)
		return layout.Dimensions{}
	})
}

func (p *DuoUIpanel) bodyLayout(gtx layout.Context, panel *gel.Panel) {
	layout.Flex{
		Axis: layout.Vertical,
	}.Layout(gtx,
		layout.Rigid(func(gtx layout.Context) layout.Dimensions {
			//cs := gtx.Constraints
			//pointer.Rect(
			//image.Rectangle{Max: image.Point{X: cs.Width.Max, Y: cs.Height.Max}},
			//).Add(gtx.Ops)
			//pointer.InputOp{Key: panel.ScrollBar.Slider}.Add(gtx.Ops)
			return 	layout.Center.Layout(gtx, func(gtx layout.Context) layout.Dimensions {
			return 	layout.Inset{
					Top: unit.Dp(float32(panel.PanelContentLayout.Position.First) * panel.ScrollUnit),
				}.Layout(gtx, func(gtx layout.Context) layout.Dimensions {
					//gtx.Constraints.Width.Min = panel.ScrollBar.Size
					//gtx.Constraints.Height.Min = panel.ScrollBar.Slider.CursorHeight
					if panel.ScrollBar.Slider.CursorHeight < panel.ScrollBar.Size {
						panel.ScrollBar.Slider.CursorHeight = panel.ScrollBar.Size
					}
					p.ScrollBar.slider.container.Layout(gtx, layout.W, func(gtx layout.Context) layout.Dimensions {
						p.ScrollBar.slider.Icon.Color = HexARGB("ffcfcfcf")
						p.ScrollBar.slider.Icon.Layout(gtx, unit.Px(float32(panel.ScrollBar.Size)))
						return layout.Dimensions{}
					})
				return layout.Dimensions{}
				})
				panel.ScrollBar.Slider.Layout(gtx)
				return layout.Dimensions{}
			})
		}),
	)
}
