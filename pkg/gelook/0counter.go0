package gelook

import (
	"gioui.org/f32"
	"gioui.org/layout"
	"gioui.org/op/clip"
	"gioui.org/op/paint"
	"gioui.org/text"
	"gioui.org/unit"
	"gioui.org/widget"
	"gioui.org/widget/material"

	"github.com/gioapp/wallet/pkg/gel"
)

type DuoUIcounter struct {
	increase     widget.Clickable
	decrease     widget.Clickable
	reset        widget.Clickable
	input        material.EditorStyle
	pageFunction func(gtx layout.Context) layout.Dimensions
	Font         text.Font
	TextSize     unit.Value
	TxColor      string
	BgColor      string
	shaper       text.Shaper
}

func (t *DuoUItheme) DuoUIcounter(pageFunction func(gtx layout.Context) layout.Dimensions) DuoUIcounter {
	return DuoUIcounter{
		// ToDo Replace theme's buttons with counter exclusive buttons, set icons for increase/decrease
		//increase: t.DuoUIbutton("", "", "", t.Colors["Light"], "", t.Colors["Dark"], "counterPlusIcon", t.Colors["Primary"], 0, 24, 32, 32, 0, 0, 0, 0),
		//decrease: t.DuoUIbutton("", "", "", t.Colors["Light"], "", t.Colors["Dark"], "counterMinusIcon", t.Colors["Primary"], 0, 24, 32, 32, 0, 0, 0, 0),
		// reset:        t.DuoUIbutton(t.Font.Secondary, "RESET", t.Colors["Primary"], t.Colors["Light"], t.Colors["Light"], t.Colors["Primary"], "", "", 12, 0, 0, 48, 48, 0),
		//input:        t.DuoUIeditor("", "DocText", "DocBg", 5),
		pageFunction: pageFunction,
		Font: text.Font{
			Typeface: t.Fonts["Primary"],
		},
		TxColor:  t.Colors["Light"],
		BgColor:  t.Colors["Dark"],
		TextSize: unit.Dp(float32(18)),
		shaper:   t.Shaper,
	}
}

func (c DuoUIcounter) Layout(gtx layout.Context, cc *gel.DuoUIcounter, label, value string) {
	cc.CounterInput.SetText(value)
	//hmin := gtx.Constraints.Width.Min
	//vmin := gtx.Constraints.Height.Min
	// txColor := c.TxColor
	//bgColor := c.BgColor
	layout.Stack{Alignment: layout.Center}.Layout(gtx,
		layout.Expanded(func(gtx layout.Context) layout.Dimensions {
			rr := float32(gtx.Px(unit.Dp(0)))
			clip.Rect{
				Rect: f32.Rectangle{Max: f32.Point{
					//X: float32(gtx.Constraints.Width.Min),
					//Y: float32(gtx.Constraints.Height.Min),
				}},
				NE: rr, NW: rr, SE: rr, SW: rr,
			}.Op(gtx.Ops).Add(gtx.Ops)
			//fill(gtx, HexARGB(bgColor))
			return layout.Dimensions{}
		}),
		layout.Stacked(func(gtx layout.Context) layout.Dimensions {
			//gtx.Constraints.Width.Min = hmin
			//gtx.Constraints.Height.Min = vmin
			layout.Center.Layout(gtx, func(gtx layout.Context) layout.Dimensions {
				layout.Flex{
					Spacing:   layout.SpaceAround,
					Alignment: layout.Middle,
				}.Layout(gtx,
					layout.Rigid(func(gtx layout.Context) layout.Dimensions {
						for cc.CounterDecrease.Clicked() {
							cc.Decrease()
							c.pageFunction(gtx)
						}
						//c.decrease.IconLayout(gtx, cc.CounterDecrease)
						return layout.Dimensions{}
					}),
					layout.Rigid(func(gtx layout.Context) layout.Dimensions {
						layout.Center.Layout(gtx, func(gtx layout.Context) layout.Dimensions {
							layout.Inset{
								Top:    unit.Dp(0),
								Right:  unit.Dp(16),
								Bottom: unit.Dp(0),
								Left:   unit.Dp(16),
							}.Layout(gtx, func(gtx layout.Context) layout.Dimensions {
								layout.Flex{
									Axis:      layout.Vertical,
									Spacing:   layout.SpaceAround,
									Alignment: layout.Middle,
								}.Layout(gtx,
									layout.Rigid(func(gtx layout.Context) layout.Dimensions {
										paint.ColorOp{Color: HexARGB(c.TxColor)}.Add(gtx.Ops)
										//gel.Label{
										//	Alignment: text.Middle,
										//}.Layout(gtx, c.shaper, c.Font, unit.Dp(8), label)
										return layout.Dimensions{}
									}),
									layout.Rigid(func(gtx layout.Context) layout.Dimensions {
										c.input.Font.Typeface = c.Font.Typeface
										c.input.Color = HexARGB(c.TxColor)
										//c.input.Layout(gtx, cc.CounterInput)
										//for _, e := range cc.CounterInput.Events(gtx) {
										//	switch e.(type) {
										//	case gel.ChangeEvent:
										//		if i, err := strconv.Atoi(cc.CounterInput.Text()); err == nil {
										//			cc.Value = i
										//		}
										//	}
										//}
										// paint.ColorOp{Color: HexARGB(c.TxColor)}.Add(gtx.Ops)
										// gel.Label{
										//	Alignment: text.Middle,
										// }.Layout(gtx, c.shaper, c.Font, unit.Dp(12), value)
										return layout.Dimensions{}
									}))
								return layout.Dimensions{}
							})
							return layout.Dimensions{}
						})
						return layout.Dimensions{}
					}),
					// layout.Flexed(0.2, func(gtx layout.Context)layout.Dimensions{
					//	//for cc.CounterReset.Clicked() {
					//	//	cc.Reset()
					//	//	c.pageFunction()
					//	//}
					//	//c.reset.Layout(gtx, cc.CounterReset)
					// }),
					layout.Rigid(func(gtx layout.Context) layout.Dimensions {
						for cc.CounterIncrease.Clicked() {
							cc.Increase()
							c.pageFunction(gtx)
						}
						//c.increase.IconLayout(gtx, cc.CounterIncrease)
						return layout.Dimensions{}
					}))
				return layout.Dimensions{}
			})
			return layout.Dimensions{}
		}),
	)

}
